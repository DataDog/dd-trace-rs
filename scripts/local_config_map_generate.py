import json

supported_configurations_file = open("supported-configurations.json", "r")
supported_configurations = json.load(supported_configurations_file)

# PLEASE DO NOT ADD ANYTHING TO THIS LIST.
# Only reason this exists is to test the code with fake env vars.
undocumented_configurations = [
    "DD_COMPLEX_STRUCT",
]

enum_block = ""
as_str_block = ""
for i, key in enumerate(supported_configurations["supportedConfigurations"].keys()):
    if i != 0:
        enum_block += "\n"
        as_str_block += "\n"
    enum_block += f"    {key},"
    if len(key) > 28:
        as_str_block += f"""\
            SupportedConfigurations::{key} => {{
                \"{key}\"
            }}"""
    else:
        as_str_block += f"            SupportedConfigurations::{key} => \"{key}\","

if len(undocumented_configurations) > 0:
    enum_block += "\n\n    /// Used for testing purposes only"
for i, key in enumerate(undocumented_configurations):
    enum_block += f"\n    #[allow(unused)]\n    {key},"
    if len(key) > 28:
        as_str_block += f"""
            SupportedConfigurations::{key} => {{
                \"{key}\"
            }}"""
    else:
        as_str_block += f"\n            SupportedConfigurations::{key} => \"{key}\","

result = f"""\
// Copyright 2025-Present Datadog, Inc. https://www.datadoghq.com/
// SPDX-License-Identifier: Apache-2.0

/// This file is generated by the scripts/local_config_map_generate.py script.
/// Do not edit this file manually. To add a new configuration,
/// add it to the supported-configurations.json file, then run this script.
#[allow(nonstandard_style)]
#[derive(Debug, PartialEq, Copy, Clone)]
#[non_exhaustive]
pub(crate) enum SupportedConfigurations {{
{enum_block}
}}

impl SupportedConfigurations {{
    pub fn as_str(&self) -> &'static str {{
        match self {{
{as_str_block}
        }}
    }}
}}
"""

with open("dd-trace/src/configuration/supported_configurations.rs", "w") as f:
    f.write(result)
